const {Markup} = require('telegraf')

const mainMenuText = 'Arbitrage Screener\n ' +
    '- –†–∞–±–æ—Ç–∞–µ–º –Ω–∞ 15 –±–∏—Ä–∂\n ' +
    '- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—ã\n ' +
    '- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö'

const inlineMainMenuKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìä Arbitrage', 'arbitrage')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
])

const settingsButton = Markup.inlineKeyboard(
    [
        [Markup.button.callback('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'ff')],
        [Markup.button.callback('–ü–æ–º–æ—â—å', 'help')],
        [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
    ]
)

const arbitrageStartMenuText = '–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å–∫—Ä–∏–Ω–µ—Ä, –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç 50$\n\n' +
    '–ö–∞–∫ –∑–∞–ø–ª–∞—Ç–∏—Ç—å?\n\n' +
    '–ó–∞–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–¥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n' +
    '............\n' +
    '–°–µ—Ç—å  -......\n\n' +
    '–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –≤—ã –ø–∏—à–∏—Ç–µ –°–Æ–î–ê, —Ç—É–¥–∞ —Å–∫–∏–¥—ã–≤–∞–µ—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏\n' +
    '- –ß—Ç–æ–±—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –±—ã–ª–æ –≤—Ä–µ–º—è –≤–∏–¥–Ω–æ –∫–æ—à–µ–ª–µ–∫ –≤–∞—à –∏ –Ω–∞—à\n' +
    '- –°—É–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n' +
    '- –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n' +
    '–ü–æ—Å–ª–µ —á–µ–≥–æ –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ'

const arbitrageStartMenuButton = Markup.inlineKeyboard(
    [
        [Markup.button.callback('‚úÖ Pay Now', 'pay')],
        [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
    ]
)

const arbitrageBasicMenuText = (arrayArbitrageItem) => {
    let message = ''
    for (const arrayArbitrageItemElement of arrayArbitrageItem) {
        message += createMessageArbitrageItem(arrayArbitrageItemElement)
    }
    return message
}

function createMessageArbitrageItem(arbitrageItem) {
    return `${arbitrageItem?.spread}
<a href="${arbitrageItem?.buyTicker?.linkOnTicker}">${arbitrageItem?.buyTicker?.exchange}</a>(${arbitrageItem?.buyTicker?.nameTicker})-> <a href="${arbitrageItem?.sellTicker?.linkOnTicker}">${arbitrageItem?.sellTicker?.exchange}</a>(${arbitrageItem?.sellTicker?.nameTicker})
\$${arbitrageItem?.buyTicker?.price}->\$${arbitrageItem?.sellTicker?.price}\n\n`
}

const arbitrageBasicMenuButton = (countPages = 0, currentPage = 1, minSpread = 0) => {
    if (countPages === 5){
        if (currentPage === 1){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                        Markup.button.callback(`2`, 'next_page'),
                        Markup.button.callback(`3`, 'third_page'),
                        Markup.button.callback(`4`, 'fourth_page'),
                        Markup.button.callback(`5`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if(currentPage === 2){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`¬∑2¬∑`, 'current_page'),
                        Markup.button.callback(`3`, 'next_page'),
                        Markup.button.callback(`4`, 'fourth_page'),
                        Markup.button.callback(`5`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage ===3){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'previous_page'),
                        Markup.button.callback(`¬∑3¬∑`, 'current_page'),
                        Markup.button.callback(`4`, 'next_page'),
                        Markup.button.callback(`5`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage === 4){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'second_page'),//
                        Markup.button.callback(`3`, 'previous_page'),
                        Markup.button.callback(`¬∑4¬∑`, 'current_page'),
                        Markup.button.callback(`5`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage === 5){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'second_page'),//
                        Markup.button.callback(`3`, 'third_page'),
                        Markup.button.callback(`4`, 'previous_page'),
                        Markup.button.callback(`¬∑5¬∑`, 'current_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }

        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                    Markup.button.callback(`2`, 'next_page'),
                    Markup.button.callback(`3`, 'third_page'),
                    Markup.button.callback(`4`, 'fourth_page'),
                    Markup.button.callback(`${countPages}`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    }else if (countPages === 4){
        if (currentPage === 1){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                        Markup.button.callback(`2`, 'next_page'),
                        Markup.button.callback(`3`, 'third_page'),
                        Markup.button.callback(`4`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if(currentPage === 2){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`¬∑2¬∑`, 'current_page'),
                        Markup.button.callback(`3`, 'next_page'),
                        Markup.button.callback(`4`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage ===3){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'previous_page'),
                        Markup.button.callback(`¬∑3¬∑`, 'current_page'),
                        Markup.button.callback(`4`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage === 4){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'second_page'),//
                        Markup.button.callback(`3`, 'previous_page'),
                        Markup.button.callback(`¬∑4¬∑`, 'current_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }
    }else if (countPages === 3){
        if (currentPage === 1){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                        Markup.button.callback(`2`, 'next_page'),
                        Markup.button.callback(`3`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if(currentPage === 2){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`¬∑2¬∑`, 'current_page'),
                        Markup.button.callback(`3`, 'last_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage ===3){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`2`, 'previous_page'),
                        Markup.button.callback(`¬∑3¬∑`, 'current_page'),

                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }
    }else if (countPages === 2){
        if (currentPage === 1){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                        Markup.button.callback(`2`, 'last_page'),
                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }else if (currentPage ===2){
            return Markup.inlineKeyboard(
                [
                    [
                        Markup.button.callback(`1`, 'first_page'),
                        Markup.button.callback(`¬∑2¬∑`, 'current_page'),
                    ],
                    [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                    [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
                ]
            )
        }
    }else if (countPages === 1){
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    }else if (currentPage === 1) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`¬∑1¬∑`, 'current_page'),
                    Markup.button.callback(`2`, 'next_page'),
                    Markup.button.callback(`3`, 'third_page'),
                    Markup.button.callback(`4`, 'fourth_page'),
                    Markup.button.callback(`${countPages}>>`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else if (currentPage === 2) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`1`, 'first_page'),
                    Markup.button.callback(`¬∑2¬∑`, 'current_page'),
                    Markup.button.callback(`3`, 'next_page'),
                    Markup.button.callback(`4`, 'fourth'),
                    Markup.button.callback(`${countPages}>>`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else if (currentPage === 3) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`1`, 'first_page'),
                    Markup.button.callback(`2`, 'previous_page'),
                    Markup.button.callback(`¬∑3¬∑`, 'current_page'),
                    Markup.button.callback(`4`, 'next_page'),
                    Markup.button.callback(`${countPages}>>`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else if (currentPage === countPages) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`<<1`, 'first_page'),
                    Markup.button.callback(`${currentPage - 3}`, 'fourth_back_page'),
                    Markup.button.callback(`${currentPage - 2}`, 'third_back_page'),
                    Markup.button.callback(`${currentPage - 1}`, 'previous_page'),
                    Markup.button.callback(`¬∑${currentPage}¬∑`, 'current_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else if (currentPage === countPages - 1) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`<<1`, 'first_page'),
                    Markup.button.callback(`${currentPage - 2}`, 'fourth_back_page'),
                    Markup.button.callback(`${currentPage - 1}`, 'previous_page'),
                    Markup.button.callback(`¬∑${currentPage}¬∑`, 'current_page'),
                    Markup.button.callback(`${countPages}`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else if (currentPage === countPages - 2) {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`<<1`, 'first_page'),
                    Markup.button.callback(`${currentPage - 1}`, 'previous_page'),
                    Markup.button.callback(`¬∑${currentPage}¬∑`, 'current_page'),
                    Markup.button.callback(`${currentPage + 1}`, 'next_page'),
                    Markup.button.callback(`${countPages}`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    } else {
        return Markup.inlineKeyboard(
            [
                [
                    Markup.button.callback(`<<1`, 'first_page'),
                    Markup.button.callback(`${currentPage - 1}`, 'previous_page'),
                    Markup.button.callback(`¬∑${currentPage}¬∑`, 'current_page'),
                    Markup.button.callback(`${currentPage + 1}`, 'next_page'),
                    Markup.button.callback(`${countPages}>>`, 'last_page')
                ],
                [Markup.button.callback(`Min %: ${minSpread}`, 'min_spread')],
                [Markup.button.callback('<–ù–∞–∑–∞–¥', 'back')]
            ]
        )
    }
}


module.exports = {
    mainMenuText,
    inlineMainMenuKeyboard,
    settingsButton,
    arbitrageStartMenuText,
    arbitrageStartMenuButton,
    arbitrageBasicMenuText,
    arbitrageBasicMenuButton
}

